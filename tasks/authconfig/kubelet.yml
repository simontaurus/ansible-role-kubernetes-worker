---
- name: Setup kubeconfig file (set-cluster)
  ansible.builtin.shell: >
    set -o errexit; \
    kubectl config set-cluster {{ k8s_config_cluster_name }} \
      --certificate-authority={{ k8s_conf_dir }}/ca-k8s-apiserver.pem \
      --embed-certs=true \
      --server=https://{{ hostvars[groups['k8s_controller'][0]]['ansible_' + hostvars[ansible_hostname]['k8s_interface']].ipv4.address }}:{{ k8s_apiserver_secure_port }} \
      --kubeconfig={{ k8s_worker_kubelet_conf_dir }}/kubeconfig
  args:
    executable: /bin/bash
  register: kubernetes_worker__set_cluster_out
  changed_when: false
  failed_when: kubernetes_worker__set_cluster_out.rc != 0
  tags:
    - k8s-auth-config-kubelet

- name: Setup kubeconfig file (set-cluster) - DEBUG OUTPUT
  ansible.builtin.debug:
    msg: "COMMAND:{{ kubernetes_worker__set_cluster_out.cmd }} | OUTPUT: {{ kubernetes_worker__set_cluster_out.stdout }}"
    verbosity: 2
  tags:
    - k8s-auth-config-kubelet

- name: Setup kubeconfig file (set-credentials)
  ansible.builtin.shell: >
    set -o errexit; \
    kubectl config set-credentials system:node:{{ ansible_hostname }} \
      --client-certificate={{ k8s_conf_dir }}/cert-{{ ansible_hostname }}.pem \
      --client-key={{ k8s_conf_dir }}/cert-{{ ansible_hostname }}-key.pem \
      --embed-certs=true \
      --kubeconfig={{ k8s_worker_kubelet_conf_dir }}/kubeconfig
  args:
    executable: /bin/bash
  register: kubernetes_worker__set_credentials_out
  changed_when: false
  failed_when: kubernetes_worker__set_credentials_out.rc != 0
  tags:
    - k8s-auth-config-kubelet

- name: Setup kubeconfig file (set-credentials) - DEBUG OUTPUT
  ansible.builtin.debug:
    msg: "COMMAND:{{ kubernetes_worker__set_credentials_out.cmd }} | OUTPUT: {{ kubernetes_worker__set_credentials_out.stdout }}"
    verbosity: 2
  tags:
    - k8s-auth-config-kubelet

- name: Setup kubeconfig file (set-context)
  ansible.builtin.shell: >
    set -o errexit; \
    kubectl config set-context default \
      --cluster={{ k8s_config_cluster_name }} \
      --user=system:node:{{ ansible_hostname }} \
      --kubeconfig={{ k8s_worker_kubelet_conf_dir }}/kubeconfig
  args:
    executable: /bin/bash
  register: kubernetes_worker__set_context_out
  changed_when: false
  failed_when: kubernetes_worker__set_context_out.rc != 0
  tags:
    - k8s-auth-config-kubelet

- name: Setup kubeconfig file (set-context) - DEBUG OUTPUT
  ansible.builtin.debug:
    msg: "COMMAND:{{ kubernetes_worker__set_context_out.cmd }} | OUTPUT: {{ kubernetes_worker__set_context_out.stdout }}"
    verbosity: 2
  tags:
    - k8s-auth-config-kubelet

- name: Set use-context
  ansible.builtin.shell: >
    set -o errexit; \
    kubectl config use-context default \
      --kubeconfig={{ k8s_worker_kubelet_conf_dir }}/kubeconfig
  args:
    executable: /bin/bash
  register: kubernetes_worker__use_context_out
  changed_when: false
  failed_when: kubernetes_worker__use_context_out.rc != 0
  tags:
    - k8s-auth-config-kubelet

- name: Set use-context - DEBUG OUTPUT
  ansible.builtin.debug:
    msg: "COMMAND:{{ kubernetes_worker__use_context_out.cmd }} | OUTPUT: {{ kubernetes_worker__use_context_out.stdout }}"
    verbosity: 2
  tags:
    - k8s-auth-config-kubelet

- name: Set file permissions
  ansible.builtin.file:
    path: "{{ k8s_worker_kubelet_conf_dir }}/kubeconfig"
    owner: "{{ k8s_config_owner }}"
    group: "{{ k8s_config_group }}"
    mode: '{{ k8s_config_file_perm }}'
    modification_time: "preserve"
    access_time: "preserve"
  tags:
    - k8s-auth-config-kubelet
